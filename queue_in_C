#include <stdio.h>
# define SIZE 5
int queueArray[SIZE];
int Rear = - 1;
int Front = - 1;

//Function definitons
void dequeue()
{
    if (Front == - 1 || Front > Rear)
    {
        printf("Underflow \n");
        return ;
    }
    else
    {
        printf("Element deleted from the Queue: %d\n", queueArray[Front]);
        Front = Front + 1;
    }
} 

void enqueue()
{
    int insert_item;
    if (Rear == SIZE - 1)
       printf("Overflow \n");
    else
    {
        if (Front == - 1)

        Front = 0;
        printf("Element to be inserted in the Queue\n : ");
        scanf("%d", &insert_item);
        Rear = Rear + 1;
        queueArray[Rear] = insert_item;
    }
} 


int main()
{
    int ch;
    while (ch != 3)
    {
        printf("1.Enqueue Operation\n");
        printf("2.Dequeue Operation\n");
        printf("3.Exit\n");
        printf("Enter your choice of operations : ");
        scanf("%d", &ch);
        if (ch ==1){
            enqueue();    
        }
        else if (ch == 2){
            dequeue();
        }
        else if (ch == 3){
            printf("Exiting\n");
        }
        else {
            printf("Incorrect choice \n");
        }
    } 
}









#include<stdio.h>

#define capacity 6

int queue[capacity];
int front = -1, rear = -1;

// Here we check if the Circular queue is full or not
int checkFull ()
{
  if ((front == rear + 1) || (front == 0 && rear == capacity - 1))
    {
      return 1;
    }
  return 0;
}

// Here we check if the Circular queue is empty or not
int checkEmpty ()
{
  if (front == -1)
    {
      return 1;
    }
  return 0;
}

// Addtion in the Circular Queue
void enqueue (int value)
{
  if (checkFull ())
    printf ("Overflow condition\n");

  else
    {
      if (front == -1)
    front = 0;

      rear = (rear + 1) % capacity;
      queue[rear] = value;
      printf ("%d was enqueued to circular queue\n", value);
    }
}

// Removal from the Circular Queue
int dequeue ()
{
  int variable;
  if (checkEmpty ())
    {
      printf ("Underflow condition\n");
      return -1;
    }
  else
    {
      variable = queue[front];
      if (front == rear)
    {
      front = rear = -1;
    }
      else
    {
      front = (front + 1) % capacity;
    }
      printf ("%d was dequeued from circular queue\n", variable);
      return 1;
    }
}

// Display the queue
void print ()
{
  int i;
  if (checkEmpty ())
    printf ("Nothing to dequeue\n");
  else
    {
      printf ("\nThe queue looks like: \n");
      for (i = front; i != rear; i = (i + 1) % capacity)
    {
      printf ("%d ", queue[i]);
    }
      printf ("%d \n\n", queue[i]);

    }
}

int main ()
{
  // Not possible as the Circular queue is empty
  dequeue ();

  enqueue (15);
  enqueue (20);
  enqueue (25);
  enqueue (30);
  enqueue (35);

  print ();
  dequeue ();
  dequeue ();

  print ();

  enqueue (40);
  enqueue (45);
  enqueue (50);
  enqueue (55);			//Overflow condition
  print ();

  return 0;
}
