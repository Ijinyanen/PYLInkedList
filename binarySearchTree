class Node():
    def __init__(self, value):
        self.value = value
        self.left = None 
        self.right  = None

class BinarySearchTree():
    def __init__(self, value):
        new_node = Node(value)
        self.root = new_node

    def insert(self, value):
        new_node = Node(value)
        if self.root is None:
            self.root = new_node
            return True
            
        temp = self.root
        
        while True:
            if new_node.value == temp.value:
                return False
            
            if new_node.value < temp.value:
                if temp.left is None:
                    temp.left = new_node
                    return True
                else:
                    temp = temp.left

            else:
                if temp.right is None:
                    temp.right = new_node
                    return True
                else:
                    temp = temp.right
                    
    def contains(self, value):
        if self.root is None:
            return False

        temp = self.root
        while temp is not None: 
            if temp.value == value:
                return True
            elif value < temp.value:
                temp = temp.left
            else:
                temp = temp.right

        return False
        
        


aTree= BinarySearchTree(5)
print(aTree.insert(2))
print(aTree.insert(10))

print(aTree.root.value)
print(aTree.root.left.value)
print(aTree.root.right.value)

print(aTree.contains(7))
