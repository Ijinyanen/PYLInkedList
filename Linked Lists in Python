class Node:
    def __init__(self, value):
        self.value = value
        self.next = None


class LinkedList:
    def __init__(self, value):
        new_node = Node(value)
        self.head = new_node
        self.tail = new_node
        self.length = 1

    def print_list(self):
        temp = self.head
        while temp is not None:
            print(temp.value)
            temp = temp.next

    def append(self, value):
        new_node = Node(value)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            self.tail = new_node
        self.length += 1
        return True

    def pop(self):
        if self.tail == None:
            return None
        else:
            temp = self.head
            pre = self.head
    
            while temp.next is not None:
                pre = temp
                temp = temp.next

            self.tail = pre
            self.tail.next = None
            self.length -=1
            if self.length == 0:
                self.head = None
                self.tail = None
            return temp

    def prepend(self, value):
        new_node = Node(value)

        if self.length == 0:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.next = self.head
            self.head = new_node
        self.length +=1
        return True

    def insert(self,index, value):
        pass

    def pop_first(self):
        if self.length ==0:
            return None
        else:
            temp = self.head
            self.head = self.head.next
            temp.next = None
            self.length -= 1
            if self.length == 0:
                self.tail = None
            return temp

    def get(self, index):
        if index < 0 or index >= self.length:
            return None
        temp = self.head
        for _ in range(index):
            temp = temp.next
        return temp

    def set_value(self, index, value):
        temp = self.get(index)
        if temp is not None:
            temp.value = value
            return True
        else:
            return False

    
    def find_middle_node(self):
        fast = self.head
        slow = self.head
    
        while fast.next is not None:
            fast = fast.next
            fast  = fast.next
            slow = slow.next
            print("run")
        return slow

    def has_loop(self):
        slow = self.head
        fast = self.head

        while fast is not None:
            slow = slow.next
            fast = fast.next.next
            if slow is fast:
                return True

        return False

    def find_kth_from_end(k):
        fast = self.head
        slow = self.head
        for i in range(k):
            if fast is None:
                return None
            fast = fast.next
            
        while fast is not None:
            fast = fast.next
            slow = slow.next
            
        return slow

    def insert(self, index, value):
        if index < 0 or index >= self.length:
            return False
        if index == 0:
            return self.prepend(value)
        if index ==self.length:
            return self.append(value)
        
        new_node = Node(value)
        temp = self.get(index - 1)
        new_node.next= temp.next
        temp.next = new_node
        self.length += 1
        return True

    def remove(self, index):
        if index < 0 or index >= self.length:
            return None
        if index == 0:
            return self.pop_first()
        elif index == self.length - 1:
            return self.pop()
        else:
            prev = self.get(index-1)
            temp = prev.next
            prev.next = temp.next
            temp.next = None
            self.length -= 1
            return temp
    
    def reverse(self):
        temp = self.head
        self.head = self.tail
        self.tail = temp

        after = temp.next
        before = None
        for _ in range(self.length):
            after = temp.next
            temp.next = before
            before = temp
            temp = after
            
    def partition_list(self, x):
        if self.length == 0:
            return None
        else:
            value = 0
            lessthan = []
            morethan = []
            temp = self.head
            for _ in range(x):
                temp = temp.next
            value = temp.value
            temp = self.head
            while temp is not None:
                if temp.value < value:
                    lessthan.append(temp.value)
                else:
                    morethan.append(temp.value)
                temp = temp.next
            temp = self.head
            for i in range(len(lessthan)):
                temp.value = lessthan[i]
                temp = temp.next
            for i in range(len(morethan)):
                temp.value = morethan[i]
                temp = temp.next

    
    def reverse_between(self,m,n):
        if self.length <= 1:
            return None
        holding_array = []
        temp = self.head
        end = n - m
        for _ in range(m):
            temp = temp.next

        for _ in range(end+1):
            holding_array.append(temp.value)
            temp = temp.next

        temp = self.head
        for _ in range(m):
            temp = temp.next

        for _ in range(end+1):
            temp.value = holding_array.pop()
            temp = temp.next

    def remove_duplicates(self):
        current = self.head
        while current:
            runner = current
            while runner.next:
                if runner.next.value == current.value:
                    runner.next = runner.next.next
                    self.length -= 1
                else:
                    runner = runner.next
            current = current.next

                     



my_linked_list = LinkedList(1)
my_linked_list.append(2)
my_linked_list.append(3)
my_linked_list.append(4)
my_linked_list.append(5)
my_linked_list.append(3)
my_linked_list.append(2)

my_linked_list.print_list()
my_linked_list.pop()
my_linked_list.prepend(10)
my_linked_list.print_list()

#my_linked_list.has_loop()
#print("break")
#my_linked_list.reverse_between(1,3)
#my_linked_list.print_list()
#print("new break")
#my_linked_list.print_list()
#print("gap")
#my_linked_list.partition_list(1)
#my_linked_list.print_list()
print("remove duplicates")
print("before:") 
my_linked_list.print_list()
my_linked_list.remove_duplicates()
print("after")
my_linked_list.print_list()
#my_linked_list = LinkedList(4)
#my_linked_list.append(2)
#print(my_linked_list.head.value)
#my_linked_list.print_list()
